import { router } from '@kit.ArkUI';
import { DataConstants, CampusInfo } from '../model/ClassroomData';
import { DateUtils } from '../model/DateUtils';
import { UserPreferences } from '../model/UserPreferences';
import { ThemeManager, ThemeColors } from '../model/ThemeManager';
import { PinyinMatcher } from '../model/PinyinMatcher';


@Entry
@Component
struct BuildingSelectionPage {
  @State selectedDate: Date = new Date();
  @State selectedCampus: string = '';
  @State campusInfo: CampusInfo | null = null;
  @State favoriteBuildings: string[] = [];
  @State searchText: string = '';
  @State showSearch: boolean = false;
  @State filteredBuildings: string[] = [];
  @StorageLink('isDarkMode') isDarkMode: boolean = false;

  aboutToAppear() {
    // ÂàùÂßãÂåñ‰∏ªÈ¢òÁÆ°ÁêÜÂô®
    ThemeManager.getInstance();
    
    const params = router.getParams() as Record<string, string | number>;
    if (params) {
      if (params.selectedDate && typeof params.selectedDate === 'number') {
        this.selectedDate = new Date(params.selectedDate);
      }
      if (params.selectedCampus && typeof params.selectedCampus === 'string') {
        this.selectedCampus = params.selectedCampus;
        this.campusInfo = DataConstants.CAMPUS_DATA.find(campus => campus.name === this.selectedCampus) || null;
      }
    }
    
    // Âä†ËΩΩÊî∂ËóèÁöÑÊïôÂ≠¶Ê•º
    this.favoriteBuildings = UserPreferences.getFavoriteBuildings();
    
    // ÂàùÂßãÂåñËøáÊª§ÂàóË°®
    this.updateFilteredBuildings();
  }

  /**
   * Â§ÑÁêÜÈïøÊåâÊïôÂ≠¶Ê•º
   */
  private onBuildingLongPress(building: string): void {
    const isFavorite = UserPreferences.isFavoriteBuilding(building);
    
    // ÁÆÄÂåñÁâàÊú¨ÔºöÁõ¥Êé•ÂàáÊç¢Êî∂ËóèÁä∂ÊÄÅ
    if (isFavorite) {
      UserPreferences.removeFavoriteBuilding(building);
    } else {
      UserPreferences.addFavoriteBuilding(building);
    }
    
    // Êõ¥Êñ∞Êî∂ËóèÂàóË°®ÔºåËøô‰ºöËá™Âä®Ëß¶ÂèëUIÂà∑Êñ∞
    this.favoriteBuildings = UserPreferences.getFavoriteBuildings();
  }

  /**
   * Êõ¥Êñ∞ËøáÊª§ÂêéÁöÑÊïôÂ≠¶Ê•ºÂàóË°®
   */
  private updateFilteredBuildings(): void {
    if (!this.campusInfo) {
      this.filteredBuildings = [];
      return;
    }
    
    if (!this.searchText) {
      this.filteredBuildings = this.campusInfo.buildings;
    } else {
      // ‰ΩøÁî®ÊãºÈü≥ÂåπÈÖçÁ≥ªÁªüËøõË°åÊêúÁ¥¢
      this.filteredBuildings = this.campusInfo.buildings.filter(building => 
        PinyinMatcher.isMatch(building, this.searchText)
      );
    }
  }



  /**
   * Â§ÑÁêÜÊêúÁ¥¢ÊñáÊú¨ÂèòÂåñ
   */
  private onSearchTextChange(value: string): void {
    this.searchText = value;
    this.updateFilteredBuildings();
  }

  /**
   * ÂàáÊç¢ÊêúÁ¥¢Ê°ÜÊòæÁ§∫Áä∂ÊÄÅ
   */
  private toggleSearch(): void {
    this.showSearch = !this.showSearch;
    if (!this.showSearch) {
      this.searchText = '';
      this.updateFilteredBuildings();
    }
  }

  build() {
    Column() {
      // Ê†áÈ¢òÊ†è
      Row() {
        Text('‚Üê')
          .fontSize(24)
          .fontColor(ThemeColors.getPrimaryColor())
          .onClick(() => {
            router.back();
          })
          .margin({ right: 16 })

        Text('ÈÄâÊã©ÊïôÂ≠¶Ê•º')
          .fontSize(20)
          .fontWeight(FontWeight.Bold)
          .fontColor(ThemeColors.getPrimaryTextColor(this.isDarkMode))
          .layoutWeight(1)
      }
      .width('100%')
      .height(60)
      .padding({ left: 16, right: 16 })
      .backgroundColor(ThemeColors.getTopBarBackgroundColor(this.isDarkMode))
      .alignItems(VerticalAlign.Center)

      Column({ space: 20 }) {
        // Êü•ËØ¢‰ø°ÊÅØ
        Row() {
          Column({ space: 4 }) {
            Text('Êü•ËØ¢‰ø°ÊÅØ')
              .fontSize(14)
              .fontColor(ThemeColors.getSecondaryTextColor(this.isDarkMode))
            Text(`${this.campusInfo?.displayName || this.selectedCampus}`)
              .fontSize(16)
              .fontWeight(FontWeight.Medium)
              .fontColor(ThemeColors.getPrimaryTextColor(this.isDarkMode))
            Text(`${DateUtils.formatDate(this.selectedDate)} ${DateUtils.getDayOfWeekChinese(this.selectedDate)} (Á¨¨${DateUtils.getWeekByDate(this.selectedDate)}Âë®)`)
              .fontSize(14)
              .fontColor(ThemeColors.getPrimaryColor())
          }
          .alignItems(HorizontalAlign.Start)
        }
        .width('100%')
        .padding(20)
        .backgroundColor(ThemeColors.getCardBackgroundColor(this.isDarkMode))
        .borderRadius(12)
        .shadow({
          radius: 8,
          color: ThemeColors.getShadowColor(this.isDarkMode),
          offsetX: 0,
          offsetY: 2
        })

        // ÊêúÁ¥¢ÊïôÂ≠¶Ê•ºÂäüËÉΩ
        Row() {
          Text('üîç ÊêúÁ¥¢ÊïôÂ≠¶Ê•º')
            .fontSize(16)
            .fontColor(ThemeColors.getPrimaryTextColor(this.isDarkMode))
            .layoutWeight(1)
          
          if (this.showSearch) {
            Row({ space: 8 }) {
              TextInput({ 
                placeholder: 'ÊãºÈü≥ÊêúÁ¥¢ (Â¶Ç: zhengxinlou, zxl)',
                text: this.searchText 
              })
                .fontSize(14)
                .backgroundColor(ThemeColors.getBackgroundColor(this.isDarkMode))
                .fontColor(ThemeColors.getPrimaryTextColor(this.isDarkMode))
                .placeholderColor(ThemeColors.getSecondaryTextColor(this.isDarkMode))
                .borderRadius(8)
                .padding({ left: 12, right: 12 })
                .width(180)
                .height(32)
                .border({
                  width: 1,
                  color: ThemeColors.getDividerColor(this.isDarkMode)
                })
                .onChange((value: string) => {
                  this.onSearchTextChange(value);
                })
              
              Button('ÂèñÊ∂à')
                .fontSize(12)
                .fontColor('#ffffff')
                .backgroundColor('#ff4444')
                .borderRadius(16)
                .width(50)
                .height(32)
                .onClick(() => {
                  this.toggleSearch();
                })
            }
          } else {
            Button('ÂºÄÂßãÊêúÁ¥¢')
              .fontSize(14)
              .fontColor('#ffffff')
              .backgroundColor(ThemeColors.getPrimaryColor())
              .borderRadius(16)
              .width(80)
              .height(36)
              .onClick(() => {
                this.toggleSearch();
              })
          }
        }
        .width('100%')
        .padding(16)
        .backgroundColor(ThemeColors.getCardBackgroundColor(this.isDarkMode))
        .borderRadius(12)
        .shadow({
          radius: 8,
          color: ThemeColors.getShadowColor(this.isDarkMode),
          offsetX: 0,
          offsetY: 2
        })
        .alignItems(VerticalAlign.Center)

        // ÊêúÁ¥¢ÁªìÊûúÁªüËÆ°
        if (this.searchText && this.campusInfo) {
          Row() {
            Text(`ÊêúÁ¥¢ÁªìÊûú: ${this.filteredBuildings.length}‰∏™ÊïôÂ≠¶Ê•º`)
              .fontSize(14)
              .fontColor(ThemeColors.getSecondaryTextColor(this.isDarkMode))
            if (this.filteredBuildings.length === 0) {
              Text('  (Ê≤°ÊúâÊâæÂà∞ÂåπÈÖçÁöÑÊïôÂ≠¶Ê•º)')
                .fontSize(14)
                .fontColor('#ff4444')
            }
          }
          .width('100%')
          .padding({ left: 16, right: 16 })
        }

        // ÊïôÂ≠¶Ê•ºÂàóË°®
        if (this.campusInfo) {
          Scroll() {
            Grid() {
              ForEach(this.filteredBuildings, (building: string, index: number) => {
                GridItem() {
                  Column({ space: 4 }) {
                    // Êî∂ËóèÊ†áËØÜ
                    if (UserPreferences.isFavoriteBuilding(building)) {
                      Row() {
                        Text('‚≠ê')
                          .fontSize(12)
                        Blank()
                      }
                      .width('100%')
                    }
                    
                    Text(building)
                      .fontSize(16)
                      .fontWeight(FontWeight.Medium)
                      .fontColor(ThemeColors.getPrimaryTextColor(this.isDarkMode))
                      .textAlign(TextAlign.Center)
                      .maxLines(2)
                      .textOverflow({ overflow: TextOverflow.Ellipsis })
                      .layoutWeight(1)
                  }
                  .width('100%')
                  .height(80)
                  .padding(12)
                  .backgroundColor(ThemeColors.getCardBackgroundColor(this.isDarkMode))
                  .borderRadius(12)
                  .shadow({
                    radius: 6,
                    color: ThemeColors.getShadowColor(this.isDarkMode),
                    offsetX: 0,
                    offsetY: 2
                  })
                  .justifyContent(FlexAlign.Center)
                  .onClick(() => {
                    this.goToClassroomList(building);
                  })
                  .gesture(
                    LongPressGesture()
                      .onAction(() => {
                        this.onBuildingLongPress(building);
                      })
                  )
                }
              })
            }
            .columnsTemplate('1fr 1fr')
            .rowsGap(16)
            .columnsGap(16)
            .width('100%')
          }
          .layoutWeight(1)
          .scrollBar(BarState.Auto)
        } else {
          Column() {
            Text('ÊöÇÊó†Êï∞ÊçÆ')
              .fontSize(16)
              .fontColor(ThemeColors.getTertiaryTextColor(this.isDarkMode))
          }
          .layoutWeight(1)
          .justifyContent(FlexAlign.Center)
        }
      }
      .width('100%')
      .layoutWeight(1)
      .padding(20)
      .justifyContent(FlexAlign.Start)
    }
    .width('100%')
    .height('100%')
    .backgroundColor(ThemeColors.getBackgroundColor(this.isDarkMode))
  }

  private goToClassroomList(building: string) {
    // ‰øùÂ≠òÊêúÁ¥¢ËÆ∞ÂΩï
    UserPreferences.saveRecentSearch({
      campus: this.selectedCampus,
      building: building,
      date: DateUtils.formatDate(this.selectedDate),
      timestamp: Date.now()
    });
    
    router.pushUrl({
      url: 'pages/ClassroomListPage',
      params: {
        selectedDate: this.selectedDate.getTime(),
        selectedCampus: this.selectedCampus,
        selectedBuilding: building
      }
    });
  }
} 