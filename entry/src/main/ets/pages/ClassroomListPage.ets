import { router } from '@kit.ArkUI';
import { FreeClassroomResult, DataConstants, FloorGroup, TimeSlotInfo } from '../model/ClassroomData';
import { DateUtils } from '../model/DateUtils';
import { ClassroomDataService } from '../service/ClassroomDataService';
import { UserPreferences } from '../model/UserPreferences';
import { ThemeManager, ThemeColors } from '../model/ThemeManager';
import { PinyinMatcher } from '../model/PinyinMatcher';

@Entry
@Component
struct ClassroomListPage {
  @State selectedDate: Date = new Date();
  @State selectedCampus: string = '';
  @State selectedBuilding: string = '';
  @State selectedTimeSlot: string = 'all';
  @State allTimeSlots: Map<string, FreeClassroomResult[]> = new Map();
  @State currentClassrooms: FreeClassroomResult[] = [];
  @State filteredClassrooms: FreeClassroomResult[] = [];
  @State loading: boolean = true;
  @State errorMessage: string = '';
  @State searchText: string = '';
  @State showSearch: boolean = false;
  @StorageLink('isDarkMode') isDarkMode: boolean = false;

  private dataService: ClassroomDataService = new ClassroomDataService(getContext(this));

  aboutToAppear() {
    // ÂàùÂßãÂåñ‰∏ªÈ¢òÁÆ°ÁêÜÂô®
    ThemeManager.getInstance();
    
    const params = router.getParams() as Record<string, string | number>;
    if (params) {
      if (params.selectedDate && typeof params.selectedDate === 'number') {
        this.selectedDate = new Date(params.selectedDate);
      }
      if (params.selectedCampus && typeof params.selectedCampus === 'string') {
        this.selectedCampus = params.selectedCampus;
      }
      if (params.selectedBuilding && typeof params.selectedBuilding === 'string') {
        this.selectedBuilding = params.selectedBuilding;
      }
    }
    this.loadClassroomData();
  }

  /**
   * ËøáÊª§ÊïôÂÆ§Êï∞ÊçÆ
   */
  private filterClassrooms(): void {
    if (!this.searchText) {
      this.filteredClassrooms = this.currentClassrooms;
    } else {
      this.filteredClassrooms = this.currentClassrooms.filter(classroom => 
        PinyinMatcher.isMatch(classroom.roomName, this.searchText)
      );
    }
  }

  /**
   * Â§ÑÁêÜÊêúÁ¥¢ÊñáÊú¨ÂèòÂåñ
   */
  private onSearchTextChange(value: string): void {
    this.searchText = value;
    this.filterClassrooms();
  }

  /**
   * ÂàáÊç¢ÊêúÁ¥¢Ê°ÜÊòæÁ§∫Áä∂ÊÄÅ
   */
  private toggleSearch(): void {
    this.showSearch = !this.showSearch;
    if (!this.showSearch) {
      this.searchText = '';
      this.filterClassrooms();
    }
  }

  build() {
    Column() {
      // Ê†áÈ¢òÊ†è
      Row() {
        Text('‚Üê')
          .fontSize(24)
          .fontColor(ThemeColors.getPrimaryColor())
          .onClick(() => {
            router.back();
          })
          .margin({ right: 16 })

        if (this.showSearch) {
          // ÊêúÁ¥¢Ê°Ü
          TextInput({ 
            placeholder: 'ÊãºÈü≥ÊêúÁ¥¢ÊïôÂÆ§ (Â¶Ç: zhengxin101)',
            text: this.searchText 
          })
            .fontSize(16)
            .backgroundColor(ThemeColors.getCardBackgroundColor(this.isDarkMode))
            .fontColor(ThemeColors.getPrimaryTextColor(this.isDarkMode))
            .placeholderColor(ThemeColors.getSecondaryTextColor(this.isDarkMode))
            .borderRadius(8)
            .padding({ left: 12, right: 12 })
            .layoutWeight(1)
            .onChange((value: string) => {
              this.onSearchTextChange(value);
            })

          Button('ÂèñÊ∂à')
            .fontSize(14)
            .fontColor(ThemeColors.getPrimaryColor())
            .backgroundColor('transparent')
            .borderRadius(16)
            .width(50)
            .height(32)
            .onClick(() => {
              this.toggleSearch();
            })
            .margin({ left: 12 })
        } else {
          Column() {
            Text(this.selectedBuilding)
              .fontSize(18)
              .fontWeight(FontWeight.Bold)
              .fontColor(ThemeColors.getPrimaryTextColor(this.isDarkMode))
            Text(`${this.selectedCampus}`)
              .fontSize(14)
              .fontColor(ThemeColors.getSecondaryTextColor(this.isDarkMode))
          }
          .alignItems(HorizontalAlign.Start)
          .layoutWeight(1)

          Button('ÊêúÁ¥¢')
            .fontSize(14)
            .fontColor('#ffffff')
            .backgroundColor(ThemeColors.getPrimaryColor())
            .borderRadius(16)
            .width(50)
            .height(32)
            .onClick(() => {
              this.toggleSearch();
            })
        }
      }
      .width('100%')
      .height(60)
      .padding({ left: 16, right: 16 })
      .backgroundColor(ThemeColors.getTopBarBackgroundColor(this.isDarkMode))
      .alignItems(VerticalAlign.Center)

      Column({ space: 16 }) {
        // ÊêúÁ¥¢ÂäüËÉΩÂå∫ÂüüÔºà‰∏¥Êó∂ÊµãËØï‰ΩçÁΩÆÔºâ
        Row() {
          Text('üîç ÊêúÁ¥¢ÊïôÂÆ§')
            .fontSize(16)
            .fontColor(ThemeColors.getPrimaryTextColor(this.isDarkMode))
            .layoutWeight(1)
          
          if (this.showSearch) {
            Row({ space: 8 }) {
              TextInput({ 
                placeholder: 'ÊãºÈü≥ÊêúÁ¥¢ÊïôÂÆ§ (Â¶Ç: zhengxin101)',
                text: this.searchText 
              })
                .fontSize(14)
                .backgroundColor(ThemeColors.getCardBackgroundColor(this.isDarkMode))
                .fontColor(ThemeColors.getPrimaryTextColor(this.isDarkMode))
                .placeholderColor(ThemeColors.getSecondaryTextColor(this.isDarkMode))
                .borderRadius(8)
                .padding({ left: 12, right: 12 })
                .width(150)
                .height(32)
                .onChange((value: string) => {
                  this.onSearchTextChange(value);
                })
              
              Button('ÂèñÊ∂à')
                .fontSize(12)
                .fontColor('#ffffff')
                .backgroundColor('#ff4444')
                .borderRadius(16)
                .width(50)
                .height(32)
                .onClick(() => {
                  this.toggleSearch();
                })
            }
          } else {
            Button('ÂºÄÂßãÊêúÁ¥¢')
              .fontSize(14)
              .fontColor('#ffffff')
              .backgroundColor(ThemeColors.getPrimaryColor())
              .borderRadius(16)
              .width(80)
              .height(36)
              .onClick(() => {
                this.toggleSearch();
              })
          }
        }
        .width('100%')
        .padding(16)
        .backgroundColor(ThemeColors.getCardBackgroundColor(this.isDarkMode))
        .borderRadius(12)
        .alignItems(VerticalAlign.Center)

        // Êü•ËØ¢‰ø°ÊÅØÂíåÁªüËÆ°
        Row() {
          Column({ space: 4 }) {
            Text(`${DateUtils.formatDate(this.selectedDate)} ${DateUtils.getDayOfWeekChinese(this.selectedDate)}`)
              .fontSize(16)
              .fontWeight(FontWeight.Medium)
              .fontColor('#333333')
            Text(`Á¨¨${DateUtils.getWeekByDate(this.selectedDate)}Âë® ¬∑ ÂÖ±${this.filteredClassrooms.length}Èó¥Á©∫ÊïôÂÆ§`)
              .fontSize(14)
              .fontColor(ThemeColors.getPrimaryColor())
          }
          .alignItems(HorizontalAlign.Start)
        }
        .width('100%')
        .padding(16)
        .backgroundColor(ThemeColors.getCardBackgroundColor(this.isDarkMode))
        .borderRadius(12)

        // Êó∂Èó¥ÊÆµÁ≠õÈÄâ
        Row() {
          Scroll() {
            Row({ space: 8 }) {
              // ÂÖ®ÈÉ®Êó∂Èó¥ÊÆµ
              Text('ÂÖ®ÈÉ®')
                .fontSize(14)
                .fontColor(this.selectedTimeSlot === 'all' ? '#ffffff' : '#007DFF')
                .padding({ left: 16, right: 16, top: 8, bottom: 8 })
                .backgroundColor(this.selectedTimeSlot === 'all' ? '#007DFF' : '#e8f4ff')
                .borderRadius(16)
                .onClick(() => {
                  this.selectedTimeSlot = 'all';
                  this.updateCurrentClassrooms();
                })

              // ÂêÑ‰∏™Êó∂Èó¥ÊÆµ
              ForEach(DataConstants.TIME_SLOTS, (timeSlot: TimeSlotInfo, index: number) => {
                Text(timeSlot.label.split(' ')[0]) // Âè™ÊòæÁ§∫ËäÇÊ¨°
                  .fontSize(14)
                  .fontColor(this.selectedTimeSlot === timeSlot.value ? '#ffffff' : '#007DFF')
                  .padding({ left: 16, right: 16, top: 8, bottom: 8 })
                  .backgroundColor(this.selectedTimeSlot === timeSlot.value ? '#007DFF' : '#e8f4ff')
                  .borderRadius(16)
                  .onClick(() => {
                    this.selectedTimeSlot = timeSlot.value;
                    this.updateCurrentClassrooms();
                  })
              })
            }
          }
          .scrollable(ScrollDirection.Horizontal)
          .scrollBar(BarState.Off)
        }
        .width('100%')
        .padding({ left: 16, right: 16 })

        // ÊïôÂÆ§ÂàóË°®
        if (this.loading) {
          Column() {
            LoadingProgress()
              .width(40)
              .height(40)
              .color(ThemeColors.getPrimaryColor())
            Text('Âä†ËΩΩ‰∏≠...')
              .fontSize(14)
              .fontColor(ThemeColors.getSecondaryTextColor(this.isDarkMode))
              .margin({ top: 8 })
          }
          .layoutWeight(1)
          .justifyContent(FlexAlign.Center)
        } else if (this.errorMessage) {
          Column() {
            Text('üòî')
              .fontSize(40)
            Text(this.errorMessage)
              .fontSize(16)
              .fontColor(ThemeColors.getSecondaryTextColor(this.isDarkMode))
              .margin({ top: 8 })
            Button('ÈáçÊñ∞Âä†ËΩΩ')
              .fontSize(14)
              .margin({ top: 16 })
              .onClick(() => {
                this.loadClassroomData();
              })
          }
          .layoutWeight(1)
          .justifyContent(FlexAlign.Center)
        } else if (this.filteredClassrooms.length === 0) {
          Column() {
            Text(this.searchText ? 'üîç' : 'üìù')
              .fontSize(40)
            Text(this.searchText ? 'Ê≤°ÊúâÊâæÂà∞ÂåπÈÖçÁöÑÊïôÂÆ§' : 'ÊöÇÊó†Á©∫Èó≤ÊïôÂÆ§')
              .fontSize(16)
              .fontColor(ThemeColors.getSecondaryTextColor(this.isDarkMode))
              .margin({ top: 8 })
          }
          .layoutWeight(1)
          .justifyContent(FlexAlign.Center)
        } else {
          List({ space: 12 }) {
            ForEach(this.groupClassroomsByFloor(), (floorGroup: FloorGroup, index: number) => {
              ListItem() {
                Column({ space: 8 }) {
                  // Ê•ºÂ±ÇÊ†áÈ¢ò
                  Row() {
                    Text(`${floorGroup.floor}Ê•º`)
                      .fontSize(16)
                      .fontWeight(FontWeight.Medium)
                      .fontColor(ThemeColors.getPrimaryTextColor(this.isDarkMode))
                    Text(`${floorGroup.rooms.length}Èó¥`)
                      .fontSize(14)
                      .fontColor(ThemeColors.getSecondaryTextColor(this.isDarkMode))
                  }
                  .width('100%')
                  .justifyContent(FlexAlign.SpaceBetween)

                  // ËØ•Ê•ºÂ±ÇÁöÑÊïôÂÆ§
                  ForEach(floorGroup.rooms, (classroom: FreeClassroomResult, index: number) => {
                    Row() {
                      Column({ space: 4 }) {
                        Text(classroom.roomName)
                          .fontSize(16)
                          .fontWeight(FontWeight.Medium)
                          .fontColor(ThemeColors.getPrimaryTextColor(this.isDarkMode))
                        
                        // ÊòæÁ§∫Á©∫Èó≤Êó∂Èó¥ÊÆµ
                        if (this.selectedTimeSlot === 'all') {
                          Flex({ wrap: FlexWrap.Wrap }) {
                            ForEach(classroom.freeTimeSlots, (timeSlot: string, index: number) => {
                              Text(DateUtils.getTimeSlotDescription(timeSlot))
                                .fontSize(12)
                                .fontColor(ThemeColors.getPrimaryColor())
                                .padding({ left: 8, right: 8, top: 4, bottom: 4 })
                                .backgroundColor(ThemeColors.getPrimaryLightColor(this.isDarkMode))
                                .borderRadius(8)
                            })
                          }
                        } else {
                          Text(DateUtils.getTimeSlotDescription(this.selectedTimeSlot))
                            .fontSize(14)
                            .fontColor(ThemeColors.getPrimaryColor())
                        }
                      }
                      .alignItems(HorizontalAlign.Start)
                      .layoutWeight(1)
                    }
                    .width('100%')
                    .padding(16)
                    .backgroundColor(ThemeColors.getCardBackgroundColor(this.isDarkMode))
                    .borderRadius(8)
                    .shadow({
                      radius: 4,
                      color: ThemeColors.getShadowColor(this.isDarkMode),
                      offsetX: 0,
                      offsetY: 1
                    })
                  })
                }
                .width('100%')
                .padding(16)
                .backgroundColor(ThemeColors.getCardBackgroundColor(this.isDarkMode))
                .borderRadius(12)
              }
            })
          }
          .layoutWeight(1)
          .padding({ left: 16, right: 16, bottom: 16 })
        }
      }
      .width('100%')
      .layoutWeight(1)
    }
    .width('100%')
    .height('100%')
    .backgroundColor(ThemeColors.getBackgroundColor(this.isDarkMode))
  }

  private async loadClassroomData() {
    try {
      this.loading = true;
      this.errorMessage = '';
      
      this.allTimeSlots = await this.dataService.getAllFreeClassrooms(
        this.selectedCampus, 
        this.selectedBuilding, 
        this.selectedDate
      );
      
      this.updateCurrentClassrooms();
    } catch (error) {
      console.error('Âä†ËΩΩÊïôÂÆ§Êï∞ÊçÆÂ§±Ë¥•:', error);
      this.errorMessage = 'Âä†ËΩΩÂ§±Ë¥•ÔºåËØ∑ÈáçËØï';
    } finally {
      this.loading = false;
    }
  }

  private updateCurrentClassrooms() {
    if (this.selectedTimeSlot === 'all') {
      // ÊòæÁ§∫ÊâÄÊúâÊó∂Èó¥ÊÆµÁöÑÊïôÂÆ§ÔºåÂêàÂπ∂ÈáçÂ§çÊïôÂÆ§
      const allRooms = new Map<string, FreeClassroomResult>();
              this.allTimeSlots.forEach((rooms, timeSlot) => {
          rooms.forEach(room => {
            if (allRooms.has(room.roomName)) {
              const existing = allRooms.get(room.roomName)!;
              const existingSlots = existing.freeTimeSlots;
              const newSlots = room.freeTimeSlots;
              const combinedSlots: string[] = [];
              for (let slot of existingSlots) {
                combinedSlots.push(slot);
              }
              for (let slot of newSlots) {
                if (combinedSlots.indexOf(slot) === -1) {
                  combinedSlots.push(slot);
                }
              }
              existing.freeTimeSlots = combinedSlots;
            } else {
              allRooms.set(room.roomName, {
                roomName: room.roomName,
                floor: room.floor,
                freeTimeSlots: room.freeTimeSlots.slice()
              });
            }
          });
        });
      this.currentClassrooms = Array.from(allRooms.values()).sort((a, b) => a.floor - b.floor);
    } else {
      // ÊòæÁ§∫ÊåáÂÆöÊó∂Èó¥ÊÆµÁöÑÊïôÂÆ§
      this.currentClassrooms = this.allTimeSlots.get(this.selectedTimeSlot) || [];
    }
    
    // Êõ¥Êñ∞ËøáÊª§ÂêéÁöÑÊïôÂÆ§Êï∞ÊçÆ
    this.filterClassrooms();
  }

  private groupClassroomsByFloor(): FloorGroup[] {
    const floorMap = new Map<number, FreeClassroomResult[]>();
    
    this.filteredClassrooms.forEach(room => {
      if (!floorMap.has(room.floor)) {
        floorMap.set(room.floor, []);
      }
      floorMap.get(room.floor)!.push(room);
    });
    
    // ÊåâÊ•ºÂ±ÇÊéíÂ∫è
    const sortedFloors = Array.from(floorMap.keys()).sort((a, b) => a - b);
    const result: FloorGroup[] = [];
    for (let floor of sortedFloors) {
      const rooms = floorMap.get(floor);
      if (rooms) {
        result.push({
          floor: floor,
          rooms: rooms
        });
      }
    }
    return result;
  }
} 